{
  "title": "Use of Hard-coded Credentials Detection (CWE-798)",
  "objective": "Identify exploitable hard-coded credential vulnerabilities by analyzing source code, configuration files, and binaries for embedded passwords, API keys, certificates, and other authentication secrets that allow attackers to gain unauthorized access. Report only confirmed instances of sensitive credentials embedded in code with high confidence in credential compromise.",
  "method": {
    "sources": ["Source code files", "Configuration files", "Environment variables", "Database scripts", "Deployment files", "Docker images", "Mobile app binaries", "Web application assets", "Build scripts"],
    "flow": "Scan for embedded credentials in plaintext or weakly encoded formats that can be extracted from accessible code repositories or deployed applications",
    "sinks": ["Database connections", "API authentication", "Service accounts", "Encryption keys", "SSH private keys", "Certificate passwords", "Admin accounts", "Third-party integrations"],
    "validation": "Exclude if using proper secret management (environment variables, key vaults, encrypted configuration)"
  },
  "patterns": {
    "database_credentials": ["password = 'admin123'", "jdbc:mysql://localhost:3306/db?user=root&password=secret", "CONNECTION_STRING = 'Server=...;Password=hardcoded;'"],
    "api_keys": ["API_KEY = 'sk-1234567890abcdef'", "aws_secret_access_key = 'wJalrXUtnFEMI/K7MDENG'", "private_key = '-----BEGIN RSA PRIVATE KEY-----'"],
    "service_accounts": ["username = 'service_account'\npassword = 'P@ssw0rd123'", "login('admin', 'defaultpass')", "auth = ('api_user', 'api_secret')"],
    "encryption_keys": ["SECRET_KEY = 'django-insecure-hardcoded-key'", "encryption_key = b'this_is_a_32_byte_key_for_aes!!'", "jwt_secret = 'my-jwt-secret-key'"],
    "cloud_credentials": ["AWS_ACCESS_KEY_ID = 'AKIAIOSFODNN7EXAMPLE'", "GOOGLE_APPLICATION_CREDENTIALS embedded", "azure_client_secret = 'hardcoded'"],
    "default_passwords": ["if password == 'admin' or password == 'password'", "DEFAULT_ADMIN_PASS = '123456'", "initial_password = 'changeme'"],
    "certificates": ["keystore_password = 'changeit'", "ssl_private_key embedded in code", "p12_password = 'default'"],
    "encoded_secrets": ["base64.decode('YWRtaW46cGFzc3dvcmQ=')", "hex encoded passwords", "ROT13 or simple obfuscation"],
    "comment_credentials": ["// TODO: Change default password 'admin123'", "/* Production password: secret */", "# password = 'temp123'"]
  },
  "report_format": {
    "file": "path:line",
    "type": "Database_Cred|API_Key|Service_Account|Encryption_Key|Cloud_Cred|Default_Password|Certificate",
    "source": "source_code|config_file|env_var|docker_image|mobile_binary",
    "sink": "db_connection|api_auth|service_login|encryption|cloud_service|admin_access",
    "flow": "hardcoded_credential→authentication_usage→system_access",
    "code": "const dbConfig = { host: 'localhost', user: 'admin', password: 'P@ssw0rd123', database: 'production' };",
    "payload": "Direct credential extraction from source code or binary",
    "fix": "Use environment variables: password: process.env.DB_PASSWORD or secret management service like AWS Secrets Manager"
  },
  "rules": [
    "Scan source code and configuration files for embedded credentials with exact file paths and line numbers",
    "Identify specific credential types and their intended usage context",
    "Suggest secure credential management practices (environment variables, key vaults, encrypted config)",
    "Verify credential context determines impact (production vs development, admin vs user access)",
    "Apply high confidence threshold; ignore test data, examples, or properly configured external references",
    "Consider both plaintext and weakly encoded credentials (base64, hex, simple obfuscation)",
    "Flag production database credentials, API keys, and administrative accounts as critical",
    "Analyze Docker images, mobile app binaries, and deployed artifacts for embedded secrets",
    "Check for default credentials that should be changed during deployment",
    "Identify cases where hardcoded credentials could lead to system compromise or data breach",
    "Consider different credential types and their specific security implications",
    "Focus on production applications, deployment scripts, and infrastructure-as-code templates",
    "Analyze version control history for accidentally committed credentials that may still be valid"
  ]
}